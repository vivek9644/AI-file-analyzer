
const formidable = require('formidable');
const pdf = require('pdf-parse');
const fs = require('fs');
const { GoogleGenerativeAI } = require("@google/generative-ai");

// Replit рдореЗрдВ рдлрд╛рдЗрд▓ рдЕрдкрд▓реЛрдб рдХреЛ рд╕рд╣реА рд╕реЗ рд╣реИрдВрдбрд▓ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдХреЙрдиреНрдлрд╝рд┐рдЧ
export const config = {
  api: {
    bodyParser: false,
  },
};

module.exports = async (req, res) => {
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'рд╕рд┐рд░реНрдл POST рд░рд┐рдХреНрд╡реЗрд╕реНрдЯреНрд╕ рд╕реНрд╡реАрдХрд╛рд░реНрдп рд╣реИрдВ' });
  }

  // Replit Secrets рд╕реЗ API key рд▓реЗрдВ
  const geminiKey = process.env.GEMINI_API_KEY;
  if (!geminiKey) {
    return res.status(500).json({ 
      error: 'GEMINI_API_KEY Replit Secrets рдореЗрдВ рдирд╣реАрдВ рдорд┐рд▓реАред рдХреГрдкрдпрд╛ add рдХрд░реЗрдВред' 
    });
  }

  const form = formidable({});
  
  form.parse(req, async (err, fields, files) => {
    if (err) {
      return res.status(500).json({ error: 'рдлрд╛рдЗрд▓ рдкрд╛рд░реНрд╕ рдХрд░рдиреЗ рдореЗрдВ рдПрд░рд░' });
    }
    
    try {
      const pdfPath = files.file.filepath;
      const dataBuffer = fs.readFileSync(pdfPath);
      
      // PDF рд╕реЗ рдЯреЗрдХреНрд╕реНрдЯ рдирд┐рдХрд╛рд▓реЗрдВ
      const pdfData = await pdf(dataBuffer);
      const extractedText = pdfData.text;
      
      if (!extractedText || extractedText.trim().length === 0) {
        return res.status(400).json({ 
          error: 'PDF рдореЗрдВ рдХреЛрдИ рдЯреЗрдХреНрд╕реНрдЯ рдирд╣реАрдВ рдорд┐рд▓рд╛ рдпрд╛ PDF protected рд╣реИ' 
        });
      }

      // Gemini AI рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░рдХреЗ рдЯреЗрдХреНрд╕реНрдЯ рдХреЛ analyze рдХрд░реЗрдВ
      const genAI = new GoogleGenerativeAI(geminiKey);
      const model = genAI.getGenerativeModel({ model: "gemini-pro" });
      
      const analysisPrompt = `
рдирд┐рдореНрдирд▓рд┐рдЦрд┐рдд PDF content рдХрд╛ detailed analysis рдХрд░реЗрдВ:

${extractedText}

рдХреГрдкрдпрд╛ рдирд┐рдореНрди рдЬрд╛рдирдХрд╛рд░реА рдкреНрд░рджрд╛рди рдХрд░реЗрдВ:
1. ЁЯУД **рдореБрдЦреНрдп рд╡рд┐рд╖рдп**: рдЗрд╕ document рдХрд╛ рдореБрдЦреНрдп рд╡рд┐рд╖рдп рдХреНрдпрд╛ рд╣реИ?
2. ЁЯОп **Key Points**: рд╕рдмрд╕реЗ рдорд╣рддреНрд╡рдкреВрд░реНрдг points рдХреНрдпрд╛ рд╣реИрдВ?
3. ЁЯУК **Summary**: 2-3 рд╡рд╛рдХреНрдпреЛрдВ рдореЗрдВ рд╕рдВрдХреНрд╖реЗрдк рджреЗрдВ
4. ЁЯФН **Category**: рдпрд╣ рдХрд┐рд╕ рдкреНрд░рдХрд╛рд░ рдХрд╛ document рд╣реИ (Report, Article, etc.)
5. ЁЯУИ **Insights**: рдХреЛрдИ рд╡рд┐рд╢реЗрд╖ insights рдпрд╛ patterns

рдХреГрдкрдпрд╛ рд╣рд┐рдВрджреА рдореЗрдВ detailed response рджреЗрдВред
      `;
      
      const result = await model.generateContent(analysisPrompt);
      const analysis = await result.response.text();
      
      res.status(200).json({
        success: true,
        extractedText: extractedText,
        analysis: analysis,
        pageCount: pdfData.numpages,
        fileName: files.file.originalFilename,
        fileSize: files.file.size
      });
      
    } catch (pdfError) {
      console.error('PDF Analysis Error:', pdfError);
      res.status(500).json({ 
        error: 'PDF analysis рдореЗрдВ рдПрд░рд░',
        details: pdfError.message 
      });
    }
  });
};
