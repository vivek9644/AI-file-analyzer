// api/chat.js - AI Nexus Studio Backend API (рдкреВрд░реНрдг рдЕрдкрдЧреНрд░реЗрдбреЗрдб рд╡рд░реНрдЬрди)

import { GoogleGenerativeAI, HarmCategory, HarmBlockThreshold } from "@google/generative-ai";
import { QdrantClient } from "@qdrant/js-client-rest";
import pdf from 'pdf-parse';
import mammoth from 'mammoth';
import Tesseract from 'tesseract.js';
import sharp from 'sharp';

// === рдХреЙрдиреНрдлрд╝рд┐рдЧрд░реЗрд╢рди рд╕реЗрдЯрдЕрдк ===
const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);

// Qdrant рдХрдиреЗрдХреНрд╢рди
const qdrantClient = new QdrantClient({
    url: process.env.QDRANT_URL || 'http://localhost:6333',
    apiKey: process.env.QDRANT_API_KEY,
});

// рд╕реБрд░рдХреНрд╖рд╛ рд╕реЗрдЯрд┐рдВрдЧреНрд╕
const safetySettings = [
    {
        category: HarmCategory.HARM_CATEGORY_HARASSMENT,
        threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE,
    },
    {
        category: HarmCategory.HARM_CATEGORY_HATE_SPEECH,
        threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE,
    },
    {
        category: HarmCategory.HARM_CATEGORY_SEXUALLY_EXPLICIT,
        threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE,
    },
    {
        category: HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT,
        threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE,
    },
];

// === рд╣реЗрд▓реНрдкрд░ рдлрдВрдХреНрд╢рдиреНрд╕ ===

/**
 * рдЯреЗрдХреНрд╕реНрдЯ рдХреЗ рд▓рд┐рдП рдПрдореНрдмреЗрдбрд┐рдВрдЧ рдЬреЗрдирд░реЗрдЯ рдХрд░рддрд╛ рд╣реИ
 */
async function getEmbedding(text) {
    try {
        const model = genAI.getGenerativeModel({ model: "embedding-001" });
        const result = await model.embedContent(text);
        return result.embedding.values;
    } catch (error) {
        console.error('рдПрдореНрдмреЗрдбрд┐рдВрдЧ рдЬреЗрдирд░реЗрдЯ рдХрд░рдиреЗ рдореЗрдВ рддреНрд░реБрдЯрд┐:', error);
        throw new Error('рдПрдореНрдмреЗрдбрд┐рдВрдЧ рд╕реЗрд╡рд╛ рдЕрдиреБрдкрд▓рдмреНрдз рд╣реИ');
    }
}

/**
 * URL рд╕реЗ рдлрд╛рдЗрд▓ рдбрд╛рдЙрдирд▓реЛрдб рдХрд░рдХреЗ рдЙрд╕рдХрд╛ рдЯреЗрдХреНрд╕реНрдЯ рдирд┐рдХрд╛рд▓рддрд╛ рд╣реИ
 */
async function extractTextFromUrl(fileUrl, fileType) {
    try {
        console.log(`ЁЯФН рдлрд╛рдЗрд▓ рдХрд╛ рд╡рд┐рд╢реНрд▓реЗрд╖рдг рд╢реБрд░реВ: ${fileUrl}`);
        
        const response = await fetch(fileUrl, {
            headers: {
                'User-Agent': 'AI-Nexus-Studio/1.0'
            }
        });
        
        if (!response.ok) {
            throw new Error(`рдлрд╛рдЗрд▓ рдбрд╛рдЙрдирд▓реЛрдб рдирд╣реАрдВ рд╣реЛ рд╕рдХреА: ${response.statusText}`);
        }
        
        const buffer = await response.arrayBuffer();
        const nodeBuffer = Buffer.from(buffer);
        
        return await extractTextFromBuffer(nodeBuffer, fileType);
        
    } catch (error) {
        console.error(`рдлрд╛рдЗрд▓ ${fileUrl} рд╕реЗ рдЯреЗрдХреНрд╕реНрдЯ рдирд┐рдХрд╛рд▓рдиреЗ рдореЗрдВ рддреНрд░реБрдЯрд┐:`, error);
        throw new Error(`рдлрд╛рдЗрд▓ рдкреНрд░реЛрд╕реЗрд╕рд┐рдВрдЧ рдореЗрдВ рддреНрд░реБрдЯрд┐: ${error.message}`);
    }
}

/**
 * рдмрдлрд░ рд╕реЗ рдлрд╛рдЗрд▓ рдЯрд╛рдЗрдк рдХреЗ рдЕрдиреБрд╕рд╛рд░ рдЯреЗрдХреНрд╕реНрдЯ рдирд┐рдХрд╛рд▓рддрд╛ рд╣реИ
 */
async function extractTextFromBuffer(buffer, fileType) {
    try {
        if (fileType.includes('pdf')) {
            return await extractPdfText(buffer);
        } else if (fileType.includes('docx') || fileType.includes('word')) {
            return await extractDocxText(buffer);
        } else if (fileType.startsWith('text/')) {
            return buffer.toString('utf-8');
        } else if (fileType.startsWith('image/')) {
            return await extractImageText(buffer);
        } else if (fileType.includes('json')) {
            return JSON.stringify(JSON.parse(buffer.toString('utf-8')), null, 2);
        } else {
            throw new Error(`рдЕрд╕рдорд░реНрдерд┐рдд рдлрд╛рдЗрд▓ рдкреНрд░рдХрд╛рд░: ${fileType}`);
        }
    } catch (error) {
        console.error('рдлрд╛рдЗрд▓ рдХрдВрдЯреЗрдВрдЯ рдирд┐рдХрд╛рд▓рдиреЗ рдореЗрдВ рддреНрд░реБрдЯрд┐:', error);
        throw error;
    }
}

/**
 * PDF рд╕реЗ рдЯреЗрдХреНрд╕реНрдЯ рдирд┐рдХрд╛рд▓рддрд╛ рд╣реИ
 */
async function extractPdfText(buffer) {
    try {
        const data = await pdf(buffer, {
            max: 50, // рдЕрдзрд┐рдХрддрдо 50 рдкреЗрдЬ
        });
        
        return {
            text: data.text,
            metadata: {
                pages: data.numpages,
                info: data.info,
                wordCount: data.text.split(' ').length
            }
        };
    } catch (error) {
        throw new Error(`PDF рдкреНрд░реЛрд╕реЗрд╕рд┐рдВрдЧ рддреНрд░реБрдЯрд┐: ${error.message}`);
    }
}

/**
 * DOCX рд╕реЗ рдЯреЗрдХреНрд╕реНрдЯ рдирд┐рдХрд╛рд▓рддрд╛ рд╣реИ
 */
async function extractDocxText(buffer) {
    try {
        const result = await mammoth.extractRawText({ buffer });
        
        return {
            text: result.value,
            metadata: {
                wordCount: result.value.split(' ').length,
                messages: result.messages
            }
        };
    } catch (error) {
        throw new Error(`DOCX рдкреНрд░реЛрд╕реЗрд╕рд┐рдВрдЧ рддреНрд░реБрдЯрд┐: ${error.message}`);
    }
}

/**
 * рдЗрдореЗрдЬ рд╕реЗ рдЯреЗрдХреНрд╕реНрдЯ рдирд┐рдХрд╛рд▓рддрд╛ рд╣реИ (OCR)
 */
async function extractImageText(buffer) {
    try {
        // рдЗрдореЗрдЬ рдХреЛ рдСрдкреНрдЯрд┐рдорд╛рдЗрдЬрд╝ рдХрд░реЗрдВ OCR рдХреЗ рд▓рд┐рдП
        const optimizedBuffer = await sharp(buffer)
            .resize(2000, 2000, { fit: 'inside', withoutEnlargement: true })
            .greyscale()
            .normalize()
            .toBuffer();

        const { data: { text, confidence } } = await Tesseract.recognize(
            optimizedBuffer,
            'hin+eng', // рд╣рд┐рдВрджреА рдФрд░ рдЕрдВрдЧреНрд░реЗрдЬреА рджреЛрдиреЛрдВ
            {
                logger: m => console.log(`OCR Progress: ${m.progress}`)
            }
        );
        
        return {
            text: text.trim(),
            metadata: {
                confidence: confidence,
                language: 'hin+eng'
            }
        };
    } catch (error) {
        throw new Error(`рдЗрдореЗрдЬ OCR рддреНрд░реБрдЯрд┐: ${error.message}`);
    }
}

/**
 * Qdrant рд╕реЗ рд╕рдВрдмрдВрдзрд┐рдд рдХреЙрдиреНрдЯреЗрдХреНрд╕реНрдЯ рдЦреЛрдЬрддрд╛ рд╣реИ
 */
async function searchRelevantContext(query, collectionName, limit = 5) {
    try {
        const queryEmbedding = await getEmbedding(query);
        
        const searchResult = await qdrantClient.search(collectionName, {
            vector: queryEmbedding,
            limit: limit,
            score_threshold: 0.7
        });

        const contexts = searchResult.map(result => ({
            content: result.payload.content,
            score: result.score,
            timestamp: result.payload.timestamp
        }));

        return contexts;
    } catch (error) {
        console.error('рдХреЙрдиреНрдЯреЗрдХреНрд╕реНрдЯ рдЦреЛрдЬрдиреЗ рдореЗрдВ рддреНрд░реБрдЯрд┐:', error);
        return [];
    }
}

/**
 * Qdrant рдореЗрдВ рдХреЙрдиреНрдЯреЗрдВрдЯ рд╕реЗрд╡ рдХрд░рддрд╛ рд╣реИ
 */
async function saveToQdrant(content, collectionName, metadata = {}) {
    try {
        const embedding = await getEmbedding(content);
        const pointId = Date.now().toString();

        await qdrantClient.upsert(collectionName, {
            wait: true,
            points: [{
                id: pointId,
                vector: embedding,
                payload: {
                    content: content,
                    timestamp: new Date().toISOString(),
                    ...metadata
                }
            }]
        });

        return pointId;
    } catch (error) {
        console.error('Qdrant рдореЗрдВ рд╕реЗрд╡ рдХрд░рдиреЗ рдореЗрдВ рддреНрд░реБрдЯрд┐:', error);
        throw error;
    }
}

/**
 * AI рд░рд┐рд╕реНрдкрд╛рдВрд╕ рдЬреЗрдирд░реЗрдЯ рдХрд░рддрд╛ рд╣реИ
 */
async function generateAIResponse(prompt, model = 'gemini-pro') {
    try {
        const aiModel = genAI.getGenerativeModel({ 
            model: model,
            safetySettings: safetySettings,
            generationConfig: {
                temperature: 0.7,
                topK: 40,
                topP: 0.8,
                maxOutputTokens: 2048,
            }
        });

        const result = await aiModel.generateContent(prompt);
        const response = await result.response;
        
        return {
            text: response.text(),
            usage: response.usage,
            safety: response.safety
        };
    } catch (error) {
        console.error('AI рд░рд┐рд╕реНрдкрд╛рдВрд╕ рдЬреЗрдирд░реЗрдЯ рдХрд░рдиреЗ рдореЗрдВ рддреНрд░реБрдЯрд┐:', error);
        throw error;
    }
}

/**
 * рдлрд╛рдЗрд▓ рд╡рд┐рд╢реНрд▓реЗрд╖рдг рдкреНрд░реЙрдореНрдкреНрдЯ рдмрдирд╛рддрд╛ рд╣реИ
 */
function createFileAnalysisPrompt(fileContent, userQuery, context, fileType, metadata) {
    return `рдЖрдк рдПрдХ рд╡рд┐рд╢реЗрд╖рдЬреНрдЮ AI рдЕрд╕рд┐рд╕реНрдЯреЗрдВрдЯ рд╣реИрдВ рдЬреЛ рдлрд╛рдЗрд▓реЛрдВ рдХрд╛ рдЧрд╣рд░рд╛ рд╡рд┐рд╢реНрд▓реЗрд╖рдг рдХрд░ рд╕рдХрддреЗ рд╣реИрдВред

**рдкрд┐рдЫрд▓реА рдмрд╛рддрдЪреАрдд рдХрд╛ рд╕рдВрджрд░реНрдн:**
${context}

**рдлрд╛рдЗрд▓ рдХреА рдЬрд╛рдирдХрд╛рд░реА:**
- рдкреНрд░рдХрд╛рд░: ${fileType}
- рдЖрдХрд╛рд░: ${metadata?.wordCount ? `${metadata.wordCount} рд╢рдмреНрдж` : 'рдЕрдЬреНрдЮрд╛рдд'}
- ${metadata?.pages ? `рдкреЗрдЬ: ${metadata.pages}` : ''}

**рдлрд╛рдЗрд▓ рдХреА рд╕рд╛рдордЧреНрд░реА:**
"""
${fileContent.substring(0, 12000)}
${fileContent.length > 12000 ? '\n\n[... рдлрд╛рдЗрд▓ рдореЗрдВ рдФрд░ рднреА рд╕рд╛рдордЧреНрд░реА рд╣реИ ...]' : ''}
"""

**рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдХрд╛ рдкреНрд░рд╢реНрди:** "${userQuery}"

рдХреГрдкрдпрд╛ рдлрд╛рдЗрд▓ рдХреА рд╕рд╛рдордЧреНрд░реА рдХреЗ рдЖрдзрд╛рд░ рдкрд░ рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдХреЗ рдкреНрд░рд╢реНрди рдХрд╛ рд╡рд┐рд╕реНрддреГрдд рдФрд░ рд╕рд╣рд╛рдпрдХ рдЙрддреНрддрд░ рджреЗрдВред рдпрджрд┐ рдЖрд╡рд╢реНрдпрдХ рд╣реЛ рддреЛ рдлрд╛рдЗрд▓ рд╕реЗ specific quotes рдпрд╛ examples рднреА рджреЗрдВред`;
}

/**
 * рд╕рд╛рдорд╛рдиреНрдп рдЪреИрдЯ рдкреНрд░реЙрдореНрдкреНрдЯ рдмрдирд╛рддрд╛ рд╣реИ
 */
function createChatPrompt(userQuery, context) {
    return `рдЖрдк рдПрдХ рд╕рд╣рд╛рдпрдХ рдФрд░ рдмреБрджреНрдзрд┐рдорд╛рди AI рдЕрд╕рд┐рд╕реНрдЯреЗрдВрдЯ рд╣реИрдВред

**рдкрд┐рдЫрд▓реА рдмрд╛рддрдЪреАрдд рдХрд╛ рд╕рдВрджрд░реНрдн:**
${context}

**рдирдпрд╛ рдкреНрд░рд╢реНрди:** ${userQuery}

рдХреГрдкрдпрд╛ рд╕рдВрджрд░реНрдн рдХреЛ рдзреНрдпрд╛рди рдореЗрдВ рд░рдЦрддреЗ рд╣реБрдП рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдХреЗ рдкреНрд░рд╢реНрди рдХрд╛ рдЙрдкрдпреЛрдЧреА рдФрд░ рд╕рдЯреАрдХ рдЙрддреНрддрд░ рджреЗрдВред`;
}

// === Vercel Edge Function Configuration ===
export const config = {
    runtime: 'edge',
    regions: ['bom1'], // Mumbai region for better performance in India
    maxDuration: 60, // 60 seconds timeout for file processing
};

// === рдореБрдЦреНрдп API рд╣реИрдВрдбрд▓рд░ ===
export default async function handler(req) {
    // CORS Headers
    const corsHeaders = {
        'Access-Control-Allow-Origin': '*',
        'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',
        'Access-Control-Allow-Headers': 'Content-Type, Authorization, X-Session-ID, X-Requested-With',
        'Access-Control-Max-Age': '86400',
    };

    // OPTIONS request рдХреЛ handle рдХрд░реЗрдВ
    if (req.method === 'OPTIONS') {
        return new Response(null, {
            status: 200,
            headers: corsHeaders
        });
    }

    // рдХреЗрд╡рд▓ POST requests рдХреЛ allow рдХрд░реЗрдВ
    if (req.method !== 'POST') {
        return new Response(JSON.stringify({ error: 'Method not allowed' }), {
            status: 405,
            headers: { ...corsHeaders, 'Content-Type': 'application/json' }
        });
    }

    try {
        // Request body parse рдХрд░реЗрдВ
        const requestBody = await req.json();
        const { 
            prompt, 
            sessionId, 
            model = 'gemini-pro',
            useContext = true,
            fileUrl = null,
            fileType = null,
            fileName = null,
            history = []
        } = requestBody;

        console.log(`ЁЯЪА рдирдпрд╛ рдЕрдиреБрд░реЛрдз рдкреНрд░рд╛рдкреНрдд рд╣реБрдЖ: ${sessionId}`);
        console.log(`ЁЯУЭ рдкреНрд░реЙрдореНрдкреНрдЯ: ${prompt?.substring(0, 100)}...`);
        console.log(`ЁЯУБ рдлрд╛рдЗрд▓: ${fileUrl ? 'рд╣рд╛рдВ' : 'рдирд╣реАрдВ'}`);

        // Basic validation
        if (!prompt) {
            return new Response(JSON.stringify({
                error: 'рдкреНрд░реЙрдореНрдкреНрдЯ рдЖрд╡рд╢реНрдпрдХ рд╣реИ',
                code: 'MISSING_PROMPT'
            }), {
                status: 400,
                headers: { ...corsHeaders, 'Content-Type': 'application/json' }
            });
        }

        if (!sessionId) {
            return new Response(JSON.stringify({
                error: 'Session ID рдЖрд╡рд╢реНрдпрдХ рд╣реИ',
                code: 'MISSING_SESSION_ID'
            }), {
                status: 400,
                headers: { ...corsHeaders, 'Content-Type': 'application/json' }
            });
        }

        // Collection name рдмрдирд╛рдПрдВ
        const collectionName = `chat_${sessionId.replace(/[^a-zA-Z0-9]/g, '_')}`;

        let finalPrompt;
        let context = '';
        let fileAnalysis = null;

        // Context рдкреНрд░рд╛рдкреНрдд рдХрд░реЗрдВ рдпрджрд┐ enabled рд╣реИ
        if (useContext) {
            try {
                const relevantContexts = await searchRelevantContext(prompt, collectionName);
                if (relevantContexts.length > 0) {
                    context = relevantContexts
                        .map(ctx => `- ${ctx.content}`)
                        .join('\n');
                    console.log(`ЁЯза ${relevantContexts.length} рд╕рдВрджрд░реНрдн рдорд┐рд▓реЗ`);
                }
            } catch (error) {
                console.warn('рдХреЙрдиреНрдЯреЗрдХреНрд╕реНрдЯ рд▓реЛрдб рдХрд░рдиреЗ рдореЗрдВ рддреНрд░реБрдЯрд┐:', error);
            }
        }

        // рдлрд╛рдЗрд▓ рд╡рд┐рд╢реНрд▓реЗрд╖рдг vs рд╕рд╛рдорд╛рдиреНрдп рдЪреИрдЯ рдХрд╛ рдирд┐рд░реНрдгрдп
        if (fileUrl && fileType) {
            // === рдлрд╛рдЗрд▓ рд╡рд┐рд╢реНрд▓реЗрд╖рдг рдореЛрдб ===
            console.log(`ЁЯУД рдлрд╛рдЗрд▓ рд╡рд┐рд╢реНрд▓реЗрд╖рдг рдореЛрдб: ${fileType}`);
            
            try {
                const extractedContent = await extractTextFromUrl(fileUrl, fileType);
                const contentText = typeof extractedContent === 'string' 
                    ? extractedContent 
                    : extractedContent.text;
                
                fileAnalysis = {
                    fileName: fileName || 'unknown',
                    fileType: fileType,
                    content: contentText,
                    metadata: extractedContent.metadata || {}
                };

                finalPrompt = createFileAnalysisPrompt(
                    contentText,
                    prompt,
                    context,
                    fileType,
                    extractedContent.metadata
                );

                console.log(`тЬЕ рдлрд╛рдЗрд▓ рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рдкреНрд░реЛрд╕реЗрд╕ рд╣реБрдИ: ${contentText.length} characters`);

            } catch (error) {
                console.error('рдлрд╛рдЗрд▓ рдкреНрд░реЛрд╕реЗрд╕рд┐рдВрдЧ рддреНрд░реБрдЯрд┐:', error);
                
                return new Response(JSON.stringify({
                    text: `рдлрд╛рдЗрд▓ рдкреНрд░реЛрд╕реЗрд╕рд┐рдВрдЧ рдореЗрдВ рддреНрд░реБрдЯрд┐ рд╣реБрдИ: ${error.message}

рдХреГрдкрдпрд╛ рд╕реБрдирд┐рд╢реНрдЪрд┐рдд рдХрд░реЗрдВ рдХрд┐:
- рдлрд╛рдЗрд▓ URL рд╕рд╣реА рд╣реИ
- рдлрд╛рдЗрд▓ рдХрд╛ рдЖрдХрд╛рд░ рдЙрдЪрд┐рдд рд╣реИ (< 10MB)
- рдлрд╛рдЗрд▓ рдлреЙрд░реНрдореЗрдЯ рд╕рдорд░реНрдерд┐рдд рд╣реИ (PDF, DOCX, TXT, Images)

рдЖрдк рджреЛрдмрд╛рд░рд╛ рдХреЛрд╢рд┐рд╢ рдХрд░ рд╕рдХрддреЗ рд╣реИрдВ рдпрд╛ рдмрд┐рдирд╛ рдлрд╛рдЗрд▓ рдХреЗ рдкреНрд░рд╢реНрди рдкреВрдЫ рд╕рдХрддреЗ рд╣реИрдВред`,
                    error: true,
                    errorType: 'FILE_PROCESSING_ERROR',
                    details: error.message
                }), {
                    status: 200, // 200 рднреЗрдЬреЗрдВ рддрд╛рдХрд┐ рдлреНрд░рдВрдЯрдПрдВрдб рдореЗрдВ error message рджрд┐рдЦреЗ
                    headers: { ...corsHeaders, 'Content-Type': 'application/json' }
                });
            }

        } else {
            // === рд╕рд╛рдорд╛рдиреНрдп рдЪреИрдЯ рдореЛрдб ===
            console.log('ЁЯТм рд╕рд╛рдорд╛рдиреНрдп рдЪреИрдЯ рдореЛрдб');
            finalPrompt = createChatPrompt(prompt, context);
        }

        // AI рд╕реЗ response рдЬреЗрдирд░реЗрдЯ рдХрд░реЗрдВ
        console.log('ЁЯдЦ AI response рдЬреЗрдирд░реЗрдЯ рдХрд░ рд░рд╣реЗ рд╣реИрдВ...');
        const aiResponse = await generateAIResponse(finalPrompt, model);

        // Response рдХреЛ Qdrant рдореЗрдВ save рдХрд░реЗрдВ
        try {
            await saveToQdrant(
                `User: ${prompt}\nAI: ${aiResponse.text}`,
                collectionName,
                {
                    type: fileUrl ? 'file_analysis' : 'chat',
                    model: model,
                    hasFile: !!fileUrl,
                    fileType: fileType || null,
                    fileName: fileName || null
                }
            );
            console.log('ЁЯТ╛ Qdrant рдореЗрдВ рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ save рдХрд┐рдпрд╛ рдЧрдпрд╛');
        } catch (error) {
            console.warn('Qdrant save рдХрд░рдиреЗ рдореЗрдВ рддреНрд░реБрдЯрд┐:', error);
        }

        // Final response рдмрдирд╛рдПрдВ
        const responseData = {
            text: aiResponse.text,
            model: model,
            contextUsed: !!context,
            relevantHistoryCount: context ? context.split('\n').length : 0,
            sessionId: sessionId,
            timestamp: new Date().toISOString(),
            fileAnalyzed: !!fileUrl,
            ...(fileAnalysis && {
                fileInfo: {
                    name: fileAnalysis.fileName,
                    type: fileAnalysis.fileType,
                    size: fileAnalysis.content.length,
                    metadata: fileAnalysis.metadata
                }
            })
        };

        console.log('тЬЕ рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ response рднреЗрдЬрд╛ рдЧрдпрд╛');

        return new Response(JSON.stringify(responseData), {
            status: 200,
            headers: { ...corsHeaders, 'Content-Type': 'application/json' }
        });

    } catch (error) {
        console.error('тЭМ API Error:', error);

        const errorResponse = {
            text: `рдорд╛рдл рдХрд░реЗрдВ, рдХреБрдЫ рддрдХрдиреАрдХреА рд╕рдорд╕реНрдпрд╛ рд╣реБрдИ рд╣реИред рдХреГрдкрдпрд╛ рджреЛрдмрд╛рд░рд╛ рдХреЛрд╢рд┐рд╢ рдХрд░реЗрдВред

**рддреНрд░реБрдЯрд┐ рдХреА рдЬрд╛рдирдХрд╛рд░реА:** ${error.message}

**рд╕реБрдЭрд╛рд╡:**
- рдереЛрдбрд╝реА рджреЗрд░ рдмрд╛рдж рдХреЛрд╢рд┐рд╢ рдХрд░реЗрдВ
- рдЕрдкрдирд╛ рдкреНрд░рд╢реНрди рдЫреЛрдЯрд╛ рдХрд░рдХреЗ рдкреВрдЫреЗрдВ
- Page refresh рдХрд░рдХреЗ рджреЗрдЦреЗрдВ`,
            error: true,
            errorType: error.name || 'UNKNOWN_ERROR',
            details: error.message,
            timestamp: new Date().toISOString()
        };

        return new Response(JSON.stringify(errorResponse), {
            status: 500,
            headers: { ...corsHeaders, 'Content-Type': 'application/json' }
        });
    }
}

// === рдЙрдкрдпреЛрдЧрд┐рддрд╛ рдлрдВрдХреНрд╢рдиреНрд╕ (Export for testing) ===
export {
    extractTextFromBuffer,
    getEmbedding,
    searchRelevantContext,
    saveToQdrant
};
